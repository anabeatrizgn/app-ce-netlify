{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anabi\\\\OneDrive\\\\Documentos\\\\Projetos\\\\clarke-challenge\\\\front-end\\\\src\\\\contexto\\\\regra-negocio\\\\index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, createContext } from \"react\";\nimport { UseAuth } from \"../../contexto/autorizacao\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FetchContext = /*#__PURE__*/createContext();\nexport function FetchProvider({\n  children\n}) {\n  _s();\n\n  const [carregando, setCarregando] = useState();\n  const {\n    setGravarUsuario,\n    setUsuario,\n    token\n  } = UseAuth();\n  const [lembrarUsuario, setLembrarUsuario] = useState(false);\n  const [fornecedores, setFornecedores] = useState([]);\n  const [lista, setLista] = useState(false);\n  const history = useHistory();\n\n  async function handleLogin(data) {\n    setCarregando(true);\n    const body = JSON.stringify(data);\n\n    try {\n      const response = await fetch(\"http://localhost:3300/login\", {\n        method: \"POST\",\n        headers: {\n          accept: \"application/json\",\n          \"content-type\": \"application/json\"\n        },\n        body\n      });\n      const login = await response.json();\n\n      if (response.status !== 200) {\n        toast.error(login);\n      } else {\n        setUsuario(login);\n\n        if (lembrarUsuario) {\n          setGravarUsuario(login);\n        }\n\n        toast.success(`OlÃ¡, ${login.usuario.nome}`, {\n          onClose: () => {\n            history.push(\"/\");\n          }\n        });\n      }\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setCarregando(false);\n    }\n  }\n\n  async function handleCadastro(data) {\n    if (data.senha !== data.confirmar_senha) {\n      toast.error(\"As senhas devem ser iguais\");\n      return;\n    }\n\n    setCarregando(true);\n    const {\n      confirmar_senha,\n      ...dataRequerida\n    } = data;\n    const body = JSON.stringify(dataRequerida);\n\n    try {\n      const response = await fetch(\"http://localhost:3300/cadastro\", {\n        method: \"POST\",\n        headers: {\n          accept: \"application/json\",\n          \"content-type\": \"application/json\"\n        },\n        body\n      });\n      const cadastro = await response.json();\n\n      if (response.status !== 200) {\n        toast.error(cadastro);\n      } else {\n        toast.success(cadastro, {\n          onClose: () => {\n            history.push(\"/login\");\n          }\n        });\n      }\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setCarregando(false);\n    }\n  }\n\n  async function handleFornecedores(data) {\n    setCarregando(true);\n    const valorDemanda = data.demanda_kwh;\n\n    try {\n      const response = await fetch(`http://localhost:3300/?demanda_kwh=${valorDemanda}`, {\n        method: \"GET\",\n        headers: {\n          accept: \"application/json\",\n          \"content-type\": \"application/json\",\n          Authorization: \"Bearer \" + token\n        }\n      });\n      const demanda = await response.json();\n\n      if (response.status !== 200) {\n        toast.error(demanda);\n      } else {\n        setFornecedores(demanda);\n        history.push(`/?demanda_kwh=${valorDemanda}`);\n        setLista(true);\n      }\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setCarregando(false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(FetchContext.Provider, {\n    value: {\n      handleLogin,\n      handleCadastro,\n      handleFornecedores,\n      carregando,\n      lembrarUsuario,\n      setLembrarUsuario,\n      fornecedores,\n      lista\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FetchProvider, \"6M8TDrSyerZLSTRkphPVEM6KU5c=\", false, function () {\n  return [useHistory];\n});\n\n_c = FetchProvider;\nexport function UseFetch() {\n  _s2();\n\n  const {\n    handleLogin,\n    handleCadastro,\n    handleFornecedores,\n    carregando,\n    lembrarUsuario,\n    setLembrarUsuario,\n    fornecedores,\n    lista\n  } = useContext(FetchContext);\n  return {\n    handleLogin,\n    handleCadastro,\n    handleFornecedores,\n    carregando,\n    lembrarUsuario,\n    setLembrarUsuario,\n    fornecedores,\n    lista\n  };\n}\n\n_s2(UseFetch, \"u9zwhWfl+9o6K1fHU1aA56vy3Os=\");\n\n_c2 = UseFetch;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FetchProvider\");\n$RefreshReg$(_c2, \"UseFetch\");","map":{"version":3,"sources":["C:/Users/anabi/OneDrive/Documentos/Projetos/clarke-challenge/front-end/src/contexto/regra-negocio/index.js"],"names":["useState","createContext","UseAuth","useHistory","toast","useContext","FetchContext","FetchProvider","children","carregando","setCarregando","setGravarUsuario","setUsuario","token","lembrarUsuario","setLembrarUsuario","fornecedores","setFornecedores","lista","setLista","history","handleLogin","data","body","JSON","stringify","response","fetch","method","headers","accept","login","json","status","error","success","usuario","nome","onClose","push","message","handleCadastro","senha","confirmar_senha","dataRequerida","cadastro","handleFornecedores","valorDemanda","demanda_kwh","Authorization","demanda","UseFetch"],"mappings":"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","sourcesContent":["import { useState, createContext } from \"react\";\r\nimport { UseAuth } from \"../../contexto/autorizacao\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useContext } from \"react\";\r\n\r\nconst FetchContext = createContext();\r\n\r\nexport function FetchProvider({ children }) {\r\n  const [carregando, setCarregando] = useState();\r\n  const { setGravarUsuario, setUsuario, token } = UseAuth();\r\n  const [lembrarUsuario, setLembrarUsuario] = useState(false);\r\n  const [fornecedores, setFornecedores] = useState([]);\r\n  const [lista, setLista] = useState(false);\r\n  const history = useHistory();\r\n\r\n  async function handleLogin(data) {\r\n    setCarregando(true);\r\n    const body = JSON.stringify(data);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3300/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          accept: \"application/json\",\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body,\r\n      });\r\n\r\n      const login = await response.json();\r\n\r\n      if (response.status !== 200) {\r\n        toast.error(login);\r\n      } else {\r\n        setUsuario(login);\r\n        if (lembrarUsuario) {\r\n          setGravarUsuario(login);\r\n        }\r\n        toast.success(`OlÃ¡, ${login.usuario.nome}`, {\r\n          onClose: () => {\r\n            history.push(\"/\");\r\n          },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n    } finally {\r\n      setCarregando(false);\r\n    }\r\n  }\r\n\r\n  async function handleCadastro(data) {\r\n    if (data.senha !== data.confirmar_senha) {\r\n      toast.error(\"As senhas devem ser iguais\");\r\n      return;\r\n    }\r\n\r\n    setCarregando(true);\r\n    const { confirmar_senha, ...dataRequerida } = data;\r\n    const body = JSON.stringify(dataRequerida);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3300/cadastro\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          accept: \"application/json\",\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body,\r\n      });\r\n\r\n      const cadastro = await response.json();\r\n\r\n      if (response.status !== 200) {\r\n        toast.error(cadastro);\r\n      } else {\r\n        toast.success(cadastro, {\r\n          onClose: () => {\r\n            history.push(\"/login\");\r\n          },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n    } finally {\r\n      setCarregando(false);\r\n    }\r\n  }\r\n\r\n  async function handleFornecedores(data) {\r\n    setCarregando(true);\r\n    const valorDemanda = data.demanda_kwh;\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:3300/?demanda_kwh=${valorDemanda}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            accept: \"application/json\",\r\n            \"content-type\": \"application/json\",\r\n            Authorization: \"Bearer \" + token,\r\n          },\r\n        }\r\n      );\r\n\r\n      const demanda = await response.json();\r\n\r\n      if (response.status !== 200) {\r\n        toast.error(demanda);\r\n      } else {\r\n        setFornecedores(demanda);\r\n        history.push(`/?demanda_kwh=${valorDemanda}`);\r\n        setLista(true);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n    } finally {\r\n      setCarregando(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FetchContext.Provider\r\n      value={{\r\n        handleLogin,\r\n        handleCadastro,\r\n        handleFornecedores,\r\n        carregando,\r\n        lembrarUsuario,\r\n        setLembrarUsuario,\r\n        fornecedores,\r\n        lista,\r\n      }}\r\n    >\r\n      {children}\r\n    </FetchContext.Provider>\r\n  );\r\n}\r\n\r\nexport function UseFetch() {\r\n  const {\r\n    handleLogin,\r\n    handleCadastro,\r\n    handleFornecedores,\r\n    carregando,\r\n    lembrarUsuario,\r\n    setLembrarUsuario,\r\n    fornecedores,\r\n    lista,\r\n  } = useContext(FetchContext);\r\n\r\n  return {\r\n    handleLogin,\r\n    handleCadastro,\r\n    handleFornecedores,\r\n    carregando,\r\n    lembrarUsuario,\r\n    setLembrarUsuario,\r\n    fornecedores,\r\n    lista,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}