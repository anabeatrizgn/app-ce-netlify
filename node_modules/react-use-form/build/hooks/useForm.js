"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * A custom hook to create the form context
 *
 * @param {Object} [initialValues] a mapping from input name to value
 * @returns {ReactContext} the context for the form
 */
var useForm = function useForm(initialValues) {
  // Create the state of the form
  var _useState = (0, _react.useState)(initialValues ? Object.keys(initialValues).reduce(function (values, name) {
    values[name] = {
      value: initialValues[name],
      isValid: true
    };
    return values;
  }, {}) : {}),
      _useState2 = _slicedToArray(_useState, 2),
      fields = _useState2[0],
      setFields = _useState2[1]; // Add or update a field value, ref and validity


  var setField = function setField(_ref) {
    var name = _ref.name,
        value = _ref.value,
        ref = _ref.ref,
        _ref$isValid = _ref.isValid,
        isValid = _ref$isValid === void 0 ? true : _ref$isValid;
    setFields(function (prevFields) {
      return _objectSpread({}, prevFields, _defineProperty({}, name, {
        value: value,
        ref: ref,
        isValid: isValid
      }));
    });
  }; // Get the value of a specific field


  var getFormValue = function getFormValue(name) {
    return fields[name] ? fields[name].value : '';
  }; // Get all field values


  var getFormValues = function getFormValues() {
    return Object.keys(fields).reduce(function (values, name) {
      values[name] = fields[name].value || '';
      return values;
    }, {});
  }; // Determine if the form is valid


  var isValid = function isValid() {
    Object.keys(fields).forEach(function (name) {
      if (!fields[name].isValid) {
        if (fields[name].ref && fields[name].ref.current) {
          fields[name].ref.current.focus();
        }

        return false;
      }
    });
    return true;
  };

  return {
    setField: setField,
    getFormValue: getFormValue,
    getFormValues: getFormValues,
    isValid: isValid
  };
};

var _default = useForm;
exports.default = _default;