"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _context = _interopRequireDefault(require("../context"));

var _useForm = _interopRequireDefault(require("../hooks/useForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A basic HTML form that uses the context API for client-side validation
 *
 * @param {Node|Node[]} [children] the children of this component
 * @param {Function} [onSubmit] a function which takes the form values and returns whether or not they are valid
 * @param {Object} [props] any additional props to pass to the child form component
 * @returns {ReactDOM} the rendered DOM
 */
var Form = function Form(_ref) {
  var children = _ref.children,
      onSubmit = _ref.onSubmit,
      props = _objectWithoutProperties(_ref, ["children", "onSubmit"]);

  var context = (0, _useForm.default)();

  var handleSubmit = function handleSubmit(event) {
    if (!context.isValid()) {
      event.preventDefault();
      return;
    }

    if (onSubmit) {
      if (!onSubmit(context.getFormValues())) {
        event.preventDefault();
        return;
      }
    }
  };

  return _react.default.createElement(_context.default.Provider, {
    value: context
  }, _react.default.createElement("form", _extends({}, props, {
    onSubmit: handleSubmit
  }), children));
};

var _default = Form;
exports.default = _default;