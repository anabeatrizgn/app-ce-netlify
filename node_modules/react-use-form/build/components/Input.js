"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _context = _interopRequireDefault(require("../context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A form input that validates and communicates its value to the closest form context.
 *
 * @param {ReactComponent} InputAs a react component class, function or string
 * @param {Function} [validate] a function which takes a value and returns a boolean
 * @param {String} name the name of the input
 * @param {Node|Node[]} [children] the children of the input
 * @param {Object} [props] any additional props to pass to the child InputAs component
 *
 * @returns {ReactDOM} the rendered DOM
 */
var Input = function Input(_ref) {
  var InputAs = _ref.InputAs,
      validate = _ref.validate,
      name = _ref.name,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["InputAs", "validate", "name", "children"]);

  var _useContext = (0, _react.useContext)(_context.default),
      setField = _useContext.setField,
      getFormValue = _useContext.getFormValue;

  var _useState = (0, _react.useState)(props.value || getFormValue(name)),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var _useState3 = (0, _react.useState)((0, _react.createRef)()),
      _useState4 = _slicedToArray(_useState3, 1),
      ref = _useState4[0];

  var handleChange = function handleChange(event) {
    setValue(event.target.value);
    var isValid = validate ? validate(event.target.value) : true;
    setField({
      name: name,
      ref: ref,
      value: event.target.value,
      isValid: isValid
    });
  };

  return _react.default.createElement(InputAs, _extends({}, props, {
    value: value,
    name: name,
    onChange: handleChange,
    ref: ref
  }), children);
};

var _default = Input;
exports.default = _default;